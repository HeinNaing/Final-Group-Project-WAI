# This is a corrected and updated GitHub Actions workflow for autograding.
# It uses a two-test system to ensure the final score is out of 100.

name: Autograding Tests

on:
  push:
    branches:
      - main

permissions:
  checks: write
  actions: read
  contents: read

jobs:
  run-autograding-tests:
    runs-on: ubuntu-latest
    # This check prevents the workflow from running on commits made by the classroom bot itself.
    if: github.actor != 'github-classroom[bot]'
    steps:
      # Step 1: Check out the student's submission code from the repository.
      - name: Checkout submission
        uses: actions/checkout@v4

      # Step 2: Read score from marks.txt and create the autograding JSON.
      # This script now creates two tests to normalize the total score to 100.
      - name: Create autograding config
        run: |
          # Set a default score in case the file is missing or invalid
          score=0
          marks_file="6_deep_learning/CNN/tf_best_practices/binary_classification/marks.txt"

          # Check if the file exists and is readable before trying to use it
          if [[ -f "$marks_file" ]]; then
              # Read the file and extract the first number found to make it more robust
              file_content=$(cat "$marks_file")
              if [[ "$file_content" =~ ([0-9]+) ]]; then
                  score=${BASH_REMATCH[1]}
              else
                  echo "Warning: Could not find a number in $marks_file. Defaulting score to 0."
              fi
          else
              echo "Warning: $marks_file not found. Defaulting score to 0."
          fi

          # Ensure the score does not exceed 100, which would cause an error.
          if (( score > 100 )); then
            echo "Warning: Score in file ($score) is greater than 100. Capping at 100."
            score=100
          fi

          # Calculate the remaining points to make the total out of 100
          remaining_points=$((100 - score))

          # Create the directory for the config file
          mkdir -p .github/classroom

          # Create the autograding.json file with the correct structure.
          # Test 1 passes and awards the student's score.
          # Test 2 fails and holds the remaining points, setting the max score to 100.
          cat <<EOF > .github/classroom/autograding.json
          {
            "tests": [
              {
                "name": "Grade based on submitted marks.txt",
                "setup": "",
                "run": "echo 'Awarding points based on file content.'",
                "input": "",
                "output": "",
                "comparison": "included",
                "points": ${score}
              },
              {
                "name": "Total Score Normalization",
                "setup": "",
                "run": "exit 1",
                "input": "",
                "output": "This is a hidden test to set the maximum score to 100. It is expected to fail.",
                "comparison": "included",
                "points": ${remaining_points}
              }
            ]
          }
          EOF

      # Step 3: Run the autograding action.
      # This action will now report the score out of 100.
      - name: Autograding
        uses: education/autograding@v1
